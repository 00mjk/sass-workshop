@import "compass/css3";

//-----------------------------------------------
// The following html5-boilerplate styles should
// probably be customized for each site
//-----------------------------------------------
body, select, input, textarea {
  color: $font-color;
  // Set your base font here, to apply evenly
  // font-family: Georgia, serif;
}

//-----------------------------------
// Add your own custom styles below
//-----------------------------------
$grid-columns: 12;
$grid-width: 960px;

@function column-width($cols) {
  @return (($grid-width / $grid-columns) * $cols / $grid-width) * 100%;
}

// Responsive Web Design Formula
// target รท container = ratio
// ratio * 100 = percent

#container {
  margin: 0 auto;
  width: 100%;
}
article, aside {
  min-height: 200px;
}
article {
  background-color: #ccc;
  float: left;
  width: column-width(8);
}
aside {
  background-color: #666;
  float: right;
  width: column-width(3);
}


// Media Queries
// Variables in Media Queries - yes
// Variables as breakpoints - No in 3.1, Yes in 3.2
// @extend inside a media query - yes/no
// @mixins inside a media query - yes

$small-breakpoint: 480px;
$medium-breakpoint: 768px;
$large-breakpoint: 1024px;

aside {
  width: 100%;
  @media screen and (min-width: $small-breakpoint) {
    width: 100px;
    float: right;
  }
  @media screen and (min-width: $medium-breakpoint) {
    width: 200px;
  }
  @media screen and (min-width: $large-breakpoint) {
    width: 400px;
  }
}

%message {
  padding: 10px;
  margin: 10px;
}
.error {
  @extend %message;
  color: red;
}
.warning {
  @extend %message;
  color: yellow;
}

@media only screen and (max-width: $small-breakpoint) {
  article{
    background-color: red;
    width: column-width(12);
  }
  aside {
    width: column-width(12);
  }
  .success {
    @extend %message; // Doesn't work when what you're extending is outside of a media query
    color: green;
  }
}

@media only screen and (min-width: $medium-breakpoint) {
  article {
    background-color: blue;
  }
}



// Media Query Mixin using @content

@mixin respond-to($media) {
  @if $media == handhelds {
    @media only screen and (max-width: $small-breakpoint) { @content; }
  }
  @else if $media == medium-screens {
    @media only screen and (min-width: $small-breakpoint + 1) and (max-width: $large-breakpoint - 1) { @content; }
  }
  @else if $media == wide-screens {
    @media only screen and (min-width: $large-breakpoint) { @content; }
  }
}

article {
  @include respond-to(wide-screens) {
    width: 500px;
  }
}
